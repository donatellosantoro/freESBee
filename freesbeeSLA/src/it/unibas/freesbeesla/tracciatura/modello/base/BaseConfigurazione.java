package it.unibas.freesbeesla.tracciatura.modello.base;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

import it.unibas.freesbeesla.tracciatura.modello.*;

import it.unibas.freesbeesla.tracciatura.modello.dao.*;

                        

/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Dec 14 20:27:47 CET 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Configurazione
 */
public abstract class BaseConfigurazione extends BaseObject
{
    /** The Peer class */
    private static final ConfigurazionePeer peer =
        new ConfigurazionePeer();

        
    /** The value for the id field */
    private Long id;
      
    /** The value for the indirizzoRegistroServizi field */
    private String indirizzoRegistroServizi;
      
    /** The value for the nomeSLA field */
    private String nomeSLA;
      
    /** The value for the tipoSLA field */
    private String tipoSLA;
      
    /** The value for the accordoServizioSla field */
    private String accordoServizioSla;
      
    /** The value for the nomeServizioMonitoraggioSla field */
    private String nomeServizioMonitoraggioSla;
      
    /** The value for the tipoServizioMonitoraggioSla field */
    private String tipoServizioMonitoraggioSla;
      
    /** The value for the pdMonitoraggioSla field */
    private String pdMonitoraggioSla;
      
    /** The value for the accordoServizioStato field */
    private String accordoServizioStato;
      
    /** The value for the nomeServizioMonitoraggioStato field */
    private String nomeServizioMonitoraggioStato;
      
    /** The value for the tipoServizioMonitoraggioStato field */
    private String tipoServizioMonitoraggioStato;
      
    /** The value for the pdMonitoraggioStato field */
    private String pdMonitoraggioStato;
  
            
    /**
     * Get the Id
     *
     * @return Long
     */
    public Long getId()
    {
        return id;
    }

                        
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(Long v) 
    {
    
                  if (!ObjectUtils.equals(this.id, v))
              {
            this.id = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the IndirizzoRegistroServizi
     *
     * @return String
     */
    public String getIndirizzoRegistroServizi()
    {
        return indirizzoRegistroServizi;
    }

                        
    /**
     * Set the value of IndirizzoRegistroServizi
     *
     * @param v new value
     */
    public void setIndirizzoRegistroServizi(String v) 
    {
    
                  if (!ObjectUtils.equals(this.indirizzoRegistroServizi, v))
              {
            this.indirizzoRegistroServizi = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the NomeSLA
     *
     * @return String
     */
    public String getNomeSLA()
    {
        return nomeSLA;
    }

                        
    /**
     * Set the value of NomeSLA
     *
     * @param v new value
     */
    public void setNomeSLA(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nomeSLA, v))
              {
            this.nomeSLA = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the TipoSLA
     *
     * @return String
     */
    public String getTipoSLA()
    {
        return tipoSLA;
    }

                        
    /**
     * Set the value of TipoSLA
     *
     * @param v new value
     */
    public void setTipoSLA(String v) 
    {
    
                  if (!ObjectUtils.equals(this.tipoSLA, v))
              {
            this.tipoSLA = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the AccordoServizioSla
     *
     * @return String
     */
    public String getAccordoServizioSla()
    {
        return accordoServizioSla;
    }

                        
    /**
     * Set the value of AccordoServizioSla
     *
     * @param v new value
     */
    public void setAccordoServizioSla(String v) 
    {
    
                  if (!ObjectUtils.equals(this.accordoServizioSla, v))
              {
            this.accordoServizioSla = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the NomeServizioMonitoraggioSla
     *
     * @return String
     */
    public String getNomeServizioMonitoraggioSla()
    {
        return nomeServizioMonitoraggioSla;
    }

                        
    /**
     * Set the value of NomeServizioMonitoraggioSla
     *
     * @param v new value
     */
    public void setNomeServizioMonitoraggioSla(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nomeServizioMonitoraggioSla, v))
              {
            this.nomeServizioMonitoraggioSla = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the TipoServizioMonitoraggioSla
     *
     * @return String
     */
    public String getTipoServizioMonitoraggioSla()
    {
        return tipoServizioMonitoraggioSla;
    }

                        
    /**
     * Set the value of TipoServizioMonitoraggioSla
     *
     * @param v new value
     */
    public void setTipoServizioMonitoraggioSla(String v) 
    {
    
                  if (!ObjectUtils.equals(this.tipoServizioMonitoraggioSla, v))
              {
            this.tipoServizioMonitoraggioSla = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the PdMonitoraggioSla
     *
     * @return String
     */
    public String getPdMonitoraggioSla()
    {
        return pdMonitoraggioSla;
    }

                        
    /**
     * Set the value of PdMonitoraggioSla
     *
     * @param v new value
     */
    public void setPdMonitoraggioSla(String v) 
    {
    
                  if (!ObjectUtils.equals(this.pdMonitoraggioSla, v))
              {
            this.pdMonitoraggioSla = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the AccordoServizioStato
     *
     * @return String
     */
    public String getAccordoServizioStato()
    {
        return accordoServizioStato;
    }

                        
    /**
     * Set the value of AccordoServizioStato
     *
     * @param v new value
     */
    public void setAccordoServizioStato(String v) 
    {
    
                  if (!ObjectUtils.equals(this.accordoServizioStato, v))
              {
            this.accordoServizioStato = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the NomeServizioMonitoraggioStato
     *
     * @return String
     */
    public String getNomeServizioMonitoraggioStato()
    {
        return nomeServizioMonitoraggioStato;
    }

                        
    /**
     * Set the value of NomeServizioMonitoraggioStato
     *
     * @param v new value
     */
    public void setNomeServizioMonitoraggioStato(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nomeServizioMonitoraggioStato, v))
              {
            this.nomeServizioMonitoraggioStato = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the TipoServizioMonitoraggioStato
     *
     * @return String
     */
    public String getTipoServizioMonitoraggioStato()
    {
        return tipoServizioMonitoraggioStato;
    }

                        
    /**
     * Set the value of TipoServizioMonitoraggioStato
     *
     * @param v new value
     */
    public void setTipoServizioMonitoraggioStato(String v) 
    {
    
                  if (!ObjectUtils.equals(this.tipoServizioMonitoraggioStato, v))
              {
            this.tipoServizioMonitoraggioStato = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the PdMonitoraggioStato
     *
     * @return String
     */
    public String getPdMonitoraggioStato()
    {
        return pdMonitoraggioStato;
    }

                        
    /**
     * Set the value of PdMonitoraggioStato
     *
     * @param v new value
     */
    public void setPdMonitoraggioStato(String v) 
    {
    
                  if (!ObjectUtils.equals(this.pdMonitoraggioStato, v))
              {
            this.pdMonitoraggioStato = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Id");
              fieldNames.add("IndirizzoRegistroServizi");
              fieldNames.add("NomeSLA");
              fieldNames.add("TipoSLA");
              fieldNames.add("AccordoServizioSla");
              fieldNames.add("NomeServizioMonitoraggioSla");
              fieldNames.add("TipoServizioMonitoraggioSla");
              fieldNames.add("PdMonitoraggioSla");
              fieldNames.add("AccordoServizioStato");
              fieldNames.add("NomeServizioMonitoraggioStato");
              fieldNames.add("TipoServizioMonitoraggioStato");
              fieldNames.add("PdMonitoraggioStato");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return getId();
            }
          if (name.equals("IndirizzoRegistroServizi"))
        {
                return getIndirizzoRegistroServizi();
            }
          if (name.equals("NomeSLA"))
        {
                return getNomeSLA();
            }
          if (name.equals("TipoSLA"))
        {
                return getTipoSLA();
            }
          if (name.equals("AccordoServizioSla"))
        {
                return getAccordoServizioSla();
            }
          if (name.equals("NomeServizioMonitoraggioSla"))
        {
                return getNomeServizioMonitoraggioSla();
            }
          if (name.equals("TipoServizioMonitoraggioSla"))
        {
                return getTipoServizioMonitoraggioSla();
            }
          if (name.equals("PdMonitoraggioSla"))
        {
                return getPdMonitoraggioSla();
            }
          if (name.equals("AccordoServizioStato"))
        {
                return getAccordoServizioStato();
            }
          if (name.equals("NomeServizioMonitoraggioStato"))
        {
                return getNomeServizioMonitoraggioStato();
            }
          if (name.equals("TipoServizioMonitoraggioStato"))
        {
                return getTipoServizioMonitoraggioStato();
            }
          if (name.equals("PdMonitoraggioStato"))
        {
                return getPdMonitoraggioStato();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ConfigurazionePeer.ID))
        {
                return getId();
            }
          if (name.equals(ConfigurazionePeer.INDIRIZZO_REGISTRO_SERVIZI))
        {
                return getIndirizzoRegistroServizi();
            }
          if (name.equals(ConfigurazionePeer.NOME_SLA))
        {
                return getNomeSLA();
            }
          if (name.equals(ConfigurazionePeer.TIPO_SLA))
        {
                return getTipoSLA();
            }
          if (name.equals(ConfigurazionePeer.ACCORDO_SERVIZIO_SLA))
        {
                return getAccordoServizioSla();
            }
          if (name.equals(ConfigurazionePeer.NOME_SERVIZIO_MONITORAGGIO_SLA))
        {
                return getNomeServizioMonitoraggioSla();
            }
          if (name.equals(ConfigurazionePeer.TIPO_SERVIZIO_MONITORAGGIO_SLA))
        {
                return getTipoServizioMonitoraggioSla();
            }
          if (name.equals(ConfigurazionePeer.PD_MONITORAGGIO_SLA))
        {
                return getPdMonitoraggioSla();
            }
          if (name.equals(ConfigurazionePeer.ACCORDO_SERVIZIO_STATO))
        {
                return getAccordoServizioStato();
            }
          if (name.equals(ConfigurazionePeer.NOME_SERVIZIO_MONITORAGGIO_STATO))
        {
                return getNomeServizioMonitoraggioStato();
            }
          if (name.equals(ConfigurazionePeer.TIPO_SERVIZIO_MONITORAGGIO_STATO))
        {
                return getTipoServizioMonitoraggioStato();
            }
          if (name.equals(ConfigurazionePeer.PD_MONITORAGGIO_STATO))
        {
                return getPdMonitoraggioStato();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return getId();
            }
              if (pos == 1)
        {
                return getIndirizzoRegistroServizi();
            }
              if (pos == 2)
        {
                return getNomeSLA();
            }
              if (pos == 3)
        {
                return getTipoSLA();
            }
              if (pos == 4)
        {
                return getAccordoServizioSla();
            }
              if (pos == 5)
        {
                return getNomeServizioMonitoraggioSla();
            }
              if (pos == 6)
        {
                return getTipoServizioMonitoraggioSla();
            }
              if (pos == 7)
        {
                return getPdMonitoraggioSla();
            }
              if (pos == 8)
        {
                return getAccordoServizioStato();
            }
              if (pos == 9)
        {
                return getNomeServizioMonitoraggioStato();
            }
              if (pos == 10)
        {
                return getTipoServizioMonitoraggioStato();
            }
              if (pos == 11)
        {
                return getPdMonitoraggioStato();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ConfigurazionePeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ConfigurazionePeer.doInsert((Configurazione) this, con);
                    setNew(false);
                }
                else
                {
                    ConfigurazionePeer.doUpdate((Configurazione) this, con);
                }
                }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setId(new Long(((NumberKey) key).longValue()));
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setId(new Long(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Configurazione copy() throws TorqueException
    {
        return copyInto(new Configurazione());
    }
  
    protected Configurazione copyInto(Configurazione copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setIndirizzoRegistroServizi(indirizzoRegistroServizi);
          copyObj.setNomeSLA(nomeSLA);
          copyObj.setTipoSLA(tipoSLA);
          copyObj.setAccordoServizioSla(accordoServizioSla);
          copyObj.setNomeServizioMonitoraggioSla(nomeServizioMonitoraggioSla);
          copyObj.setTipoServizioMonitoraggioSla(tipoServizioMonitoraggioSla);
          copyObj.setPdMonitoraggioSla(pdMonitoraggioSla);
          copyObj.setAccordoServizioStato(accordoServizioStato);
          copyObj.setNomeServizioMonitoraggioStato(nomeServizioMonitoraggioStato);
          copyObj.setTipoServizioMonitoraggioStato(tipoServizioMonitoraggioStato);
          copyObj.setPdMonitoraggioStato(pdMonitoraggioStato);
  
                    copyObj.setId((Long)null);
                                                                              
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ConfigurazionePeer getPeer()
    {
        return peer;
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Configurazione:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("IndirizzoRegistroServizi = ")
               .append(getIndirizzoRegistroServizi())
             .append("\n");
        str.append("NomeSLA = ")
               .append(getNomeSLA())
             .append("\n");
        str.append("TipoSLA = ")
               .append(getTipoSLA())
             .append("\n");
        str.append("AccordoServizioSla = ")
               .append(getAccordoServizioSla())
             .append("\n");
        str.append("NomeServizioMonitoraggioSla = ")
               .append(getNomeServizioMonitoraggioSla())
             .append("\n");
        str.append("TipoServizioMonitoraggioSla = ")
               .append(getTipoServizioMonitoraggioSla())
             .append("\n");
        str.append("PdMonitoraggioSla = ")
               .append(getPdMonitoraggioSla())
             .append("\n");
        str.append("AccordoServizioStato = ")
               .append(getAccordoServizioStato())
             .append("\n");
        str.append("NomeServizioMonitoraggioStato = ")
               .append(getNomeServizioMonitoraggioStato())
             .append("\n");
        str.append("TipoServizioMonitoraggioStato = ")
               .append(getTipoServizioMonitoraggioStato())
             .append("\n");
        str.append("PdMonitoraggioStato = ")
               .append(getPdMonitoraggioStato())
             .append("\n");
        return(str.toString());
    }
}
