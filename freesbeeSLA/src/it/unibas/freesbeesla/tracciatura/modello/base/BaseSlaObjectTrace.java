package it.unibas.freesbeesla.tracciatura.modello.base;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

import it.unibas.freesbeesla.tracciatura.modello.*;

import it.unibas.freesbeesla.tracciatura.modello.dao.*;

                                      

/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Dec 14 20:27:47 CET 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to SlaObjectTrace
 */
public abstract class BaseSlaObjectTrace extends BaseObject
{
    /** The Peer class */
    private static final SlaObjectTracePeer peer =
        new SlaObjectTracePeer();

        
    /** The value for the inf2IdService field */
    private String inf2IdService;
      
    /** The value for the inf2IdInitiator field */
    private String inf2IdInitiator;
      
    /** The value for the inf2IdResponder field */
    private String inf2IdResponder;
      
    /** The value for the inf2SlaBasicMetric field */
    private String inf2SlaBasicMetric;
      
    /** The value for the inf2SlaBasicMetricDataInsert field */
    private Date inf2SlaBasicMetricDataInsert;
      
    /** The value for the inf2SlaBasicMetricValue field */
    private Double inf2SlaBasicMetricValue;
      
    /** The value for the inf2SlaBasicMetricMillisecondsInsert field */
    private BigDecimal inf2SlaBasicMetricMillisecondsInsert;
  
            
    /**
     * Get the Inf2IdService
     *
     * @return String
     */
    public String getInf2IdService()
    {
        return inf2IdService;
    }

                              
    /**
     * Set the value of Inf2IdService
     *
     * @param v new value
     */
    public void setInf2IdService(String v) throws TorqueException
    {
    
                  if (!ObjectUtils.equals(this.inf2IdService, v))
              {
            this.inf2IdService = v;
            setModified(true);
        }
    
                                  
                if (aService != null && !ObjectUtils.equals(aService.getInf2IdService(), v))
                {
            aService = null;
        }
      
              }
          
    /**
     * Get the Inf2IdInitiator
     *
     * @return String
     */
    public String getInf2IdInitiator()
    {
        return inf2IdInitiator;
    }

                              
    /**
     * Set the value of Inf2IdInitiator
     *
     * @param v new value
     */
    public void setInf2IdInitiator(String v) throws TorqueException
    {
    
                  if (!ObjectUtils.equals(this.inf2IdInitiator, v))
              {
            this.inf2IdInitiator = v;
            setModified(true);
        }
    
                                  
                if (aService != null && !ObjectUtils.equals(aService.getInf2IdInitiator(), v))
                {
            aService = null;
        }
      
              }
          
    /**
     * Get the Inf2IdResponder
     *
     * @return String
     */
    public String getInf2IdResponder()
    {
        return inf2IdResponder;
    }

                              
    /**
     * Set the value of Inf2IdResponder
     *
     * @param v new value
     */
    public void setInf2IdResponder(String v) throws TorqueException
    {
    
                  if (!ObjectUtils.equals(this.inf2IdResponder, v))
              {
            this.inf2IdResponder = v;
            setModified(true);
        }
    
                                  
                if (aService != null && !ObjectUtils.equals(aService.getInf2IdResponder(), v))
                {
            aService = null;
        }
      
              }
          
    /**
     * Get the Inf2SlaBasicMetric
     *
     * @return String
     */
    public String getInf2SlaBasicMetric()
    {
        return inf2SlaBasicMetric;
    }

                        
    /**
     * Set the value of Inf2SlaBasicMetric
     *
     * @param v new value
     */
    public void setInf2SlaBasicMetric(String v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2SlaBasicMetric, v))
              {
            this.inf2SlaBasicMetric = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Inf2SlaBasicMetricDataInsert
     *
     * @return Date
     */
    public Date getInf2SlaBasicMetricDataInsert()
    {
        return inf2SlaBasicMetricDataInsert;
    }

                        
    /**
     * Set the value of Inf2SlaBasicMetricDataInsert
     *
     * @param v new value
     */
    public void setInf2SlaBasicMetricDataInsert(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2SlaBasicMetricDataInsert, v))
              {
            this.inf2SlaBasicMetricDataInsert = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Inf2SlaBasicMetricValue
     *
     * @return Double
     */
    public Double getInf2SlaBasicMetricValue()
    {
        return inf2SlaBasicMetricValue;
    }

                        
    /**
     * Set the value of Inf2SlaBasicMetricValue
     *
     * @param v new value
     */
    public void setInf2SlaBasicMetricValue(Double v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2SlaBasicMetricValue, v))
              {
            this.inf2SlaBasicMetricValue = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Inf2SlaBasicMetricMillisecondsInsert
     *
     * @return BigDecimal
     */
    public BigDecimal getInf2SlaBasicMetricMillisecondsInsert()
    {
        return inf2SlaBasicMetricMillisecondsInsert;
    }

                        
    /**
     * Set the value of Inf2SlaBasicMetricMillisecondsInsert
     *
     * @param v new value
     */
    public void setInf2SlaBasicMetricMillisecondsInsert(BigDecimal v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2SlaBasicMetricMillisecondsInsert, v))
              {
            this.inf2SlaBasicMetricMillisecondsInsert = v;
            setModified(true);
        }
    
          
              }
  
      
        
                                      
    
        private Service aService;

    /**
     * Declares an association between this object and a Service object
     *
     * @param v Service
     * @throws TorqueException
     */
    public void setService(Service v) throws TorqueException
    {
            if (v == null)
        {
                  setInf2IdService((String) null);
              }
        else
        {
            setInf2IdService(v.getInf2IdService());
        }
            if (v == null)
        {
                  setInf2IdInitiator((String) null);
              }
        else
        {
            setInf2IdInitiator(v.getInf2IdInitiator());
        }
            if (v == null)
        {
                  setInf2IdResponder((String) null);
              }
        else
        {
            setInf2IdResponder(v.getInf2IdResponder());
        }
            aService = v;
    }

                                                        
    /**
     * Returns the associated Service object.
           * If it was not retrieved before, the object is retrieved from
     * the database
           *
     * @return the associated Service object
           * @throws TorqueException
           */
    public Service getService()
              throws TorqueException
          {
              if (aService == null && (!ObjectUtils.equals(this.inf2IdService, null) && !ObjectUtils.equals(this.inf2IdInitiator, null) && !ObjectUtils.equals(this.inf2IdResponder, null)))
        {
                              aService = ServicePeer.retrieveByPK(this.inf2IdService, this.inf2IdInitiator, this.inf2IdResponder);
                  
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Service obj = ServicePeer.retrieveByPK(this.inf2IdService, this.inf2IdInitiator, this.inf2IdResponder);
               obj.add${pCollName}(this);
            */
        }
              return aService;
    }

    /**
     * Return the associated Service object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Service object
     * @throws TorqueException
     */
    public Service getService(Connection connection)
        throws TorqueException
    {
        if (aService == null && (!ObjectUtils.equals(this.inf2IdService, null) && !ObjectUtils.equals(this.inf2IdInitiator, null) && !ObjectUtils.equals(this.inf2IdResponder, null)))
        {
                          aService = ServicePeer.retrieveByPK(this.inf2IdService, this.inf2IdInitiator, this.inf2IdResponder, connection);
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Service obj = ServicePeer.retrieveByPK(this.inf2IdService, this.inf2IdInitiator, this.inf2IdResponder, connection);
               obj.add${pCollName}(this);
            */
        }
        return aService;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         * Note: It is important that the xml schema used to create this class
     * maintains consistency in the order of related columns between
     * icar_inf2_sla_object_trace and icar_inf2_service.
     * If for some reason this is impossible, this method should be
     * overridden in <code>SlaObjectTrace</code>.
         */
    public void setServiceKey(ObjectKey key) throws TorqueException
    {
              SimpleKey[] keys = (SimpleKey[]) key.getValue();
                
                            setInf2IdService(keys[0].toString());
                  
                            setInf2IdInitiator(keys[1].toString());
                  
                            setInf2IdResponder(keys[2].toString());
                            }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Inf2IdService");
              fieldNames.add("Inf2IdInitiator");
              fieldNames.add("Inf2IdResponder");
              fieldNames.add("Inf2SlaBasicMetric");
              fieldNames.add("Inf2SlaBasicMetricDataInsert");
              fieldNames.add("Inf2SlaBasicMetricValue");
              fieldNames.add("Inf2SlaBasicMetricMillisecondsInsert");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Inf2IdService"))
        {
                return getInf2IdService();
            }
          if (name.equals("Inf2IdInitiator"))
        {
                return getInf2IdInitiator();
            }
          if (name.equals("Inf2IdResponder"))
        {
                return getInf2IdResponder();
            }
          if (name.equals("Inf2SlaBasicMetric"))
        {
                return getInf2SlaBasicMetric();
            }
          if (name.equals("Inf2SlaBasicMetricDataInsert"))
        {
                return getInf2SlaBasicMetricDataInsert();
            }
          if (name.equals("Inf2SlaBasicMetricValue"))
        {
                return getInf2SlaBasicMetricValue();
            }
          if (name.equals("Inf2SlaBasicMetricMillisecondsInsert"))
        {
                return getInf2SlaBasicMetricMillisecondsInsert();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(SlaObjectTracePeer.INF2_ID_SERVICE))
        {
                return getInf2IdService();
            }
          if (name.equals(SlaObjectTracePeer.INF2_ID_INITIATOR))
        {
                return getInf2IdInitiator();
            }
          if (name.equals(SlaObjectTracePeer.INF2_ID_RESPONDER))
        {
                return getInf2IdResponder();
            }
          if (name.equals(SlaObjectTracePeer.INF2_SLA_BASIC_METRIC))
        {
                return getInf2SlaBasicMetric();
            }
          if (name.equals(SlaObjectTracePeer.INF2_SLA_BASIC_METRIC_DATA_INSERT))
        {
                return getInf2SlaBasicMetricDataInsert();
            }
          if (name.equals(SlaObjectTracePeer.INF2_SLA_BASIC_METRIC_VALUE))
        {
                return getInf2SlaBasicMetricValue();
            }
          if (name.equals(SlaObjectTracePeer.INF2_SLA_BASIC_METRIC_MILLISECONDS_INSERT))
        {
                return getInf2SlaBasicMetricMillisecondsInsert();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return getInf2IdService();
            }
              if (pos == 1)
        {
                return getInf2IdInitiator();
            }
              if (pos == 2)
        {
                return getInf2IdResponder();
            }
              if (pos == 3)
        {
                return getInf2SlaBasicMetric();
            }
              if (pos == 4)
        {
                return getInf2SlaBasicMetricDataInsert();
            }
              if (pos == 5)
        {
                return getInf2SlaBasicMetricValue();
            }
              if (pos == 6)
        {
                return getInf2SlaBasicMetricMillisecondsInsert();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(SlaObjectTracePeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    SlaObjectTracePeer.doInsert((SlaObjectTrace) this, con);
                    setNew(false);
                }
                else
                {
                    SlaObjectTracePeer.doUpdate((SlaObjectTrace) this, con);
                }
                }

                      alreadyInSave = false;
        }
      }

                                                                                                                    
  
    private final SimpleKey[] pks = new SimpleKey[6];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        SimpleKey tmpKey = null;
                      setInf2IdService(keys[0].toString());
                        setInf2IdInitiator(keys[1].toString());
                        setInf2IdResponder(keys[2].toString());
                        setInf2SlaBasicMetric(keys[3].toString());
                        setInf2SlaBasicMetricDataInsert(((DateKey)keys[4]).getDate());
                        setInf2SlaBasicMetricMillisecondsInsert(((NumberKey)keys[5]).getBigDecimal());
              }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
         * @param inf2IdService String
         * @param inf2IdInitiator String
         * @param inf2IdResponder String
         * @param inf2SlaBasicMetric String
         * @param inf2SlaBasicMetricDataInsert Date
         * @param inf2SlaBasicMetricMillisecondsInsert BigDecimal
         */
    public void setPrimaryKey( String inf2IdService, String inf2IdInitiator, String inf2IdResponder, String inf2SlaBasicMetric, Date inf2SlaBasicMetricDataInsert, BigDecimal inf2SlaBasicMetricMillisecondsInsert)
        throws TorqueException
    {
            setInf2IdService(inf2IdService);
            setInf2IdInitiator(inf2IdInitiator);
            setInf2IdResponder(inf2IdResponder);
            setInf2SlaBasicMetric(inf2SlaBasicMetric);
            setInf2SlaBasicMetricDataInsert(inf2SlaBasicMetricDataInsert);
            setInf2SlaBasicMetricMillisecondsInsert(inf2SlaBasicMetricMillisecondsInsert);
        }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }
  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
              pks[0] = SimpleKey.keyFor(getInf2IdService());
                  pks[1] = SimpleKey.keyFor(getInf2IdInitiator());
                  pks[2] = SimpleKey.keyFor(getInf2IdResponder());
                  pks[3] = SimpleKey.keyFor(getInf2SlaBasicMetric());
                  pks[4] = SimpleKey.keyFor(getInf2SlaBasicMetricDataInsert());
                  pks[5] = SimpleKey.keyFor(getInf2SlaBasicMetricMillisecondsInsert());
                  return comboPK;
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public SlaObjectTrace copy() throws TorqueException
    {
        return copyInto(new SlaObjectTrace());
    }
  
    protected SlaObjectTrace copyInto(SlaObjectTrace copyObj) throws TorqueException
    {
          copyObj.setInf2IdService(inf2IdService);
          copyObj.setInf2IdInitiator(inf2IdInitiator);
          copyObj.setInf2IdResponder(inf2IdResponder);
          copyObj.setInf2SlaBasicMetric(inf2SlaBasicMetric);
          copyObj.setInf2SlaBasicMetricDataInsert(inf2SlaBasicMetricDataInsert);
          copyObj.setInf2SlaBasicMetricValue(inf2SlaBasicMetricValue);
          copyObj.setInf2SlaBasicMetricMillisecondsInsert(inf2SlaBasicMetricMillisecondsInsert);
  
                    copyObj.setInf2IdService((String)null);
                              copyObj.setInf2IdInitiator((String)null);
                              copyObj.setInf2IdResponder((String)null);
                              copyObj.setInf2SlaBasicMetric((String)null);
                              copyObj.setInf2SlaBasicMetricDataInsert((Date)null);
                                    copyObj.setInf2SlaBasicMetricMillisecondsInsert((BigDecimal)null);
            
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SlaObjectTracePeer getPeer()
    {
        return peer;
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("SlaObjectTrace:\n");
        str.append("Inf2IdService = ")
               .append(getInf2IdService())
             .append("\n");
        str.append("Inf2IdInitiator = ")
               .append(getInf2IdInitiator())
             .append("\n");
        str.append("Inf2IdResponder = ")
               .append(getInf2IdResponder())
             .append("\n");
        str.append("Inf2SlaBasicMetric = ")
               .append(getInf2SlaBasicMetric())
             .append("\n");
        str.append("Inf2SlaBasicMetricDataInsert = ")
               .append(getInf2SlaBasicMetricDataInsert())
             .append("\n");
        str.append("Inf2SlaBasicMetricValue = ")
               .append(getInf2SlaBasicMetricValue())
             .append("\n");
        str.append("Inf2SlaBasicMetricMillisecondsInsert = ")
               .append(getInf2SlaBasicMetricMillisecondsInsert())
             .append("\n");
        return(str.toString());
    }
}
