package it.unibas.freesbeesla.tracciatura.modello.base;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

import it.unibas.freesbeesla.tracciatura.modello.*;

import it.unibas.freesbeesla.tracciatura.modello.dao.*;

                

/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Dec 14 20:27:47 CET 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Service
 */
public abstract class BaseService extends BaseObject
{
    /** The Peer class */
    private static final ServicePeer peer =
        new ServicePeer();

        
    /** The value for the inf2IdService field */
    private String inf2IdService;
      
    /** The value for the inf2IdInitiator field */
    private String inf2IdInitiator;
      
    /** The value for the inf2IdResponder field */
    private String inf2IdResponder;
      
    /** The value for the inf2IdAgreement field */
    private String inf2IdAgreement;
      
    /** The value for the inf2IdState field */
    private String inf2IdState;
      
    /** The value for the inf2SlaObject field */
    private String inf2SlaObject;
                                                  
    /** The value for the inf2CountPendingRequest field */
    private Long inf2CountPendingRequest = new Long(0);
                                                  
    /** The value for the inf2Active field */
    private Long inf2Active = new Long(1);
  
            
    /**
     * Get the Inf2IdService
     *
     * @return String
     */
    public String getInf2IdService()
    {
        return inf2IdService;
    }

                                              
    /**
     * Set the value of Inf2IdService
     *
     * @param v new value
     */
    public void setInf2IdService(String v) throws TorqueException
    {
    
                  if (!ObjectUtils.equals(this.inf2IdService, v))
              {
            this.inf2IdService = v;
            setModified(true);
        }
    
          
                                  
                  // update associated SlaObjectTrace
        if (collSlaObjectTraces != null)
        {
            for (int i = 0; i < collSlaObjectTraces.size(); i++)
            {
                ((SlaObjectTrace) collSlaObjectTraces.get(i))
                    .setInf2IdService(v);
            }
        }
                                }
          
    /**
     * Get the Inf2IdInitiator
     *
     * @return String
     */
    public String getInf2IdInitiator()
    {
        return inf2IdInitiator;
    }

                                              
    /**
     * Set the value of Inf2IdInitiator
     *
     * @param v new value
     */
    public void setInf2IdInitiator(String v) throws TorqueException
    {
    
                  if (!ObjectUtils.equals(this.inf2IdInitiator, v))
              {
            this.inf2IdInitiator = v;
            setModified(true);
        }
    
          
                                  
                  // update associated SlaObjectTrace
        if (collSlaObjectTraces != null)
        {
            for (int i = 0; i < collSlaObjectTraces.size(); i++)
            {
                ((SlaObjectTrace) collSlaObjectTraces.get(i))
                    .setInf2IdInitiator(v);
            }
        }
                                }
          
    /**
     * Get the Inf2IdResponder
     *
     * @return String
     */
    public String getInf2IdResponder()
    {
        return inf2IdResponder;
    }

                                              
    /**
     * Set the value of Inf2IdResponder
     *
     * @param v new value
     */
    public void setInf2IdResponder(String v) throws TorqueException
    {
    
                  if (!ObjectUtils.equals(this.inf2IdResponder, v))
              {
            this.inf2IdResponder = v;
            setModified(true);
        }
    
          
                                  
                  // update associated SlaObjectTrace
        if (collSlaObjectTraces != null)
        {
            for (int i = 0; i < collSlaObjectTraces.size(); i++)
            {
                ((SlaObjectTrace) collSlaObjectTraces.get(i))
                    .setInf2IdResponder(v);
            }
        }
                                }
          
    /**
     * Get the Inf2IdAgreement
     *
     * @return String
     */
    public String getInf2IdAgreement()
    {
        return inf2IdAgreement;
    }

                        
    /**
     * Set the value of Inf2IdAgreement
     *
     * @param v new value
     */
    public void setInf2IdAgreement(String v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2IdAgreement, v))
              {
            this.inf2IdAgreement = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Inf2IdState
     *
     * @return String
     */
    public String getInf2IdState()
    {
        return inf2IdState;
    }

                        
    /**
     * Set the value of Inf2IdState
     *
     * @param v new value
     */
    public void setInf2IdState(String v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2IdState, v))
              {
            this.inf2IdState = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Inf2SlaObject
     *
     * @return String
     */
    public String getInf2SlaObject()
    {
        return inf2SlaObject;
    }

                        
    /**
     * Set the value of Inf2SlaObject
     *
     * @param v new value
     */
    public void setInf2SlaObject(String v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2SlaObject, v))
              {
            this.inf2SlaObject = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Inf2CountPendingRequest
     *
     * @return Long
     */
    public Long getInf2CountPendingRequest()
    {
        return inf2CountPendingRequest;
    }

                        
    /**
     * Set the value of Inf2CountPendingRequest
     *
     * @param v new value
     */
    public void setInf2CountPendingRequest(Long v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2CountPendingRequest, v))
              {
            this.inf2CountPendingRequest = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Inf2Active
     *
     * @return Long
     */
    public Long getInf2Active()
    {
        return inf2Active;
    }

                        
    /**
     * Set the value of Inf2Active
     *
     * @param v new value
     */
    public void setInf2Active(Long v) 
    {
    
                  if (!ObjectUtils.equals(this.inf2Active, v))
              {
            this.inf2Active = v;
            setModified(true);
        }
    
          
              }
  
         
                                                            
            
          /**
     * Collection to store aggregation of collSlaObjectTraces
     */
    protected List collSlaObjectTraces;

    /**
     * Temporary storage of collSlaObjectTraces to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSlaObjectTraces()
    {
        if (collSlaObjectTraces == null)
        {
            collSlaObjectTraces = new ArrayList();
        }
    }

        
    /**
     * Method called to associate a SlaObjectTrace object to this object
     * through the SlaObjectTrace foreign key attribute
     *
     * @param l SlaObjectTrace
     * @throws TorqueException
     */
    public void addSlaObjectTrace(SlaObjectTrace l) throws TorqueException
    {
        getSlaObjectTraces().add(l);
        l.setService((Service) this);
    }

    /**
     * The criteria used to select the current contents of collSlaObjectTraces
     */
    private Criteria lastSlaObjectTracesCriteria = null;
      
    /**
                   * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSlaObjectTraces(new Criteria())
                   *
     * @return the collection of associated objects
           * @throws TorqueException
           */
    public List getSlaObjectTraces()
              throws TorqueException
          {
                      if (collSlaObjectTraces == null)
        {
            collSlaObjectTraces = getSlaObjectTraces(new Criteria(10));
        }
                return collSlaObjectTraces;
          }

    /**
           * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service has previously
           * been saved, it will retrieve related SlaObjectTraces from storage.
     * If this Service is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSlaObjectTraces(Criteria criteria) throws TorqueException
    {
              if (collSlaObjectTraces == null)
        {
            if (isNew())
            {
               collSlaObjectTraces = new ArrayList();
            }
            else
            {
                        criteria.add(SlaObjectTracePeer.INF2_ID_SERVICE, getInf2IdService() );
                        criteria.add(SlaObjectTracePeer.INF2_ID_INITIATOR, getInf2IdInitiator() );
                        criteria.add(SlaObjectTracePeer.INF2_ID_RESPONDER, getInf2IdResponder() );
                        collSlaObjectTraces = SlaObjectTracePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SlaObjectTracePeer.INF2_ID_SERVICE, getInf2IdService());
                      criteria.add(SlaObjectTracePeer.INF2_ID_INITIATOR, getInf2IdInitiator());
                      criteria.add(SlaObjectTracePeer.INF2_ID_RESPONDER, getInf2IdResponder());
                            if (!lastSlaObjectTracesCriteria.equals(criteria))
                {
                    collSlaObjectTraces = SlaObjectTracePeer.doSelect(criteria);
                }
            }
        }
        lastSlaObjectTracesCriteria = criteria;

        return collSlaObjectTraces;
          }

    /**
           * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSlaObjectTraces(new Criteria(),Connection)
           * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSlaObjectTraces(Connection con) throws TorqueException
    {
              if (collSlaObjectTraces == null)
        {
            collSlaObjectTraces = getSlaObjectTraces(new Criteria(10), con);
        }
        return collSlaObjectTraces;
          }

    /**
           * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service has previously
           * been saved, it will retrieve related SlaObjectTraces from storage.
     * If this Service is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSlaObjectTraces(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSlaObjectTraces == null)
        {
            if (isNew())
            {
               collSlaObjectTraces = new ArrayList();
            }
            else
            {
                         criteria.add(SlaObjectTracePeer.INF2_ID_SERVICE, getInf2IdService());
                         criteria.add(SlaObjectTracePeer.INF2_ID_INITIATOR, getInf2IdInitiator());
                         criteria.add(SlaObjectTracePeer.INF2_ID_RESPONDER, getInf2IdResponder());
                         collSlaObjectTraces = SlaObjectTracePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                             criteria.add(SlaObjectTracePeer.INF2_ID_SERVICE, getInf2IdService());
                       criteria.add(SlaObjectTracePeer.INF2_ID_INITIATOR, getInf2IdInitiator());
                       criteria.add(SlaObjectTracePeer.INF2_ID_RESPONDER, getInf2IdResponder());
                             if (!lastSlaObjectTracesCriteria.equals(criteria))
                 {
                     collSlaObjectTraces = SlaObjectTracePeer.doSelect(criteria, con);
                 }
             }
         }
         lastSlaObjectTracesCriteria = criteria;

         return collSlaObjectTraces;
           }

                  
              
                    
                              
                                                                            
                                                                                                          
                                        
                    
                    
          
    /**
                 * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service is new, it will return
                 * an empty collection; or if this Service has previously
     * been saved, it will retrieve related SlaObjectTraces from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Service.
     */
    protected List getSlaObjectTracesJoinService(Criteria criteria)
        throws TorqueException
    {
                    if (collSlaObjectTraces == null)
        {
            if (isNew())
            {
               collSlaObjectTraces = new ArrayList();
            }
            else
            {
                              criteria.add(SlaObjectTracePeer.INF2_ID_SERVICE, getInf2IdService());
                              criteria.add(SlaObjectTracePeer.INF2_ID_INITIATOR, getInf2IdInitiator());
                              criteria.add(SlaObjectTracePeer.INF2_ID_RESPONDER, getInf2IdResponder());
                              collSlaObjectTraces = SlaObjectTracePeer.doSelectJoinService(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
                                    criteria.add(SlaObjectTracePeer.INF2_ID_SERVICE, getInf2IdService());
                        criteria.add(SlaObjectTracePeer.INF2_ID_INITIATOR, getInf2IdInitiator());
                        criteria.add(SlaObjectTracePeer.INF2_ID_RESPONDER, getInf2IdResponder());
                                    if (!lastSlaObjectTracesCriteria.equals(criteria))
            {
                collSlaObjectTraces = SlaObjectTracePeer.doSelectJoinService(criteria);
            }
        }
        lastSlaObjectTracesCriteria = criteria;

        return collSlaObjectTraces;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Inf2IdService");
              fieldNames.add("Inf2IdInitiator");
              fieldNames.add("Inf2IdResponder");
              fieldNames.add("Inf2IdAgreement");
              fieldNames.add("Inf2IdState");
              fieldNames.add("Inf2SlaObject");
              fieldNames.add("Inf2CountPendingRequest");
              fieldNames.add("Inf2Active");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Inf2IdService"))
        {
                return getInf2IdService();
            }
          if (name.equals("Inf2IdInitiator"))
        {
                return getInf2IdInitiator();
            }
          if (name.equals("Inf2IdResponder"))
        {
                return getInf2IdResponder();
            }
          if (name.equals("Inf2IdAgreement"))
        {
                return getInf2IdAgreement();
            }
          if (name.equals("Inf2IdState"))
        {
                return getInf2IdState();
            }
          if (name.equals("Inf2SlaObject"))
        {
                return getInf2SlaObject();
            }
          if (name.equals("Inf2CountPendingRequest"))
        {
                return getInf2CountPendingRequest();
            }
          if (name.equals("Inf2Active"))
        {
                return getInf2Active();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ServicePeer.INF2_ID_SERVICE))
        {
                return getInf2IdService();
            }
          if (name.equals(ServicePeer.INF2_ID_INITIATOR))
        {
                return getInf2IdInitiator();
            }
          if (name.equals(ServicePeer.INF2_ID_RESPONDER))
        {
                return getInf2IdResponder();
            }
          if (name.equals(ServicePeer.INF2_ID_AGREEMENT))
        {
                return getInf2IdAgreement();
            }
          if (name.equals(ServicePeer.INF2_ID_STATE))
        {
                return getInf2IdState();
            }
          if (name.equals(ServicePeer.INF2_SLA_OBJECT))
        {
                return getInf2SlaObject();
            }
          if (name.equals(ServicePeer.INF2_COUNT_PENDING_REQUEST))
        {
                return getInf2CountPendingRequest();
            }
          if (name.equals(ServicePeer.INF2_ACTIVE))
        {
                return getInf2Active();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return getInf2IdService();
            }
              if (pos == 1)
        {
                return getInf2IdInitiator();
            }
              if (pos == 2)
        {
                return getInf2IdResponder();
            }
              if (pos == 3)
        {
                return getInf2IdAgreement();
            }
              if (pos == 4)
        {
                return getInf2IdState();
            }
              if (pos == 5)
        {
                return getInf2SlaObject();
            }
              if (pos == 6)
        {
                return getInf2CountPendingRequest();
            }
              if (pos == 7)
        {
                return getInf2Active();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ServicePeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ServicePeer.doInsert((Service) this, con);
                    setNew(false);
                }
                else
                {
                    ServicePeer.doUpdate((Service) this, con);
                }
                }

                                                                          
                                    if (collSlaObjectTraces != null)
            {
                for (int i = 0; i < collSlaObjectTraces.size(); i++)
                {
                    ((SlaObjectTrace) collSlaObjectTraces.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                                                                    
  
    private final SimpleKey[] pks = new SimpleKey[3];
    private final ComboKey comboPK = new ComboKey(pks);

    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        SimpleKey tmpKey = null;
                      setInf2IdService(keys[0].toString());
                        setInf2IdInitiator(keys[1].toString());
                        setInf2IdResponder(keys[2].toString());
              }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
         * @param inf2IdService String
         * @param inf2IdInitiator String
         * @param inf2IdResponder String
         */
    public void setPrimaryKey( String inf2IdService, String inf2IdInitiator, String inf2IdResponder)
        throws TorqueException
    {
            setInf2IdService(inf2IdService);
            setInf2IdInitiator(inf2IdInitiator);
            setInf2IdResponder(inf2IdResponder);
        }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }
  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
              pks[0] = SimpleKey.keyFor(getInf2IdService());
                  pks[1] = SimpleKey.keyFor(getInf2IdInitiator());
                  pks[2] = SimpleKey.keyFor(getInf2IdResponder());
                  return comboPK;
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Service copy() throws TorqueException
    {
        return copyInto(new Service());
    }
  
    protected Service copyInto(Service copyObj) throws TorqueException
    {
          copyObj.setInf2IdService(inf2IdService);
          copyObj.setInf2IdInitiator(inf2IdInitiator);
          copyObj.setInf2IdResponder(inf2IdResponder);
          copyObj.setInf2IdAgreement(inf2IdAgreement);
          copyObj.setInf2IdState(inf2IdState);
          copyObj.setInf2SlaObject(inf2SlaObject);
          copyObj.setInf2CountPendingRequest(inf2CountPendingRequest);
          copyObj.setInf2Active(inf2Active);
  
                    copyObj.setInf2IdService((String)null);
                              copyObj.setInf2IdInitiator((String)null);
                              copyObj.setInf2IdResponder((String)null);
                                          
                                                                          
                            
        List v = getSlaObjectTraces();
                            if (v != null)
        {
            for (int i = 0; i < v.size(); i++)
            {
                SlaObjectTrace obj = (SlaObjectTrace) v.get(i);
                copyObj.addSlaObjectTrace(obj.copy());
            }
        }
        else
        {
            copyObj.collSlaObjectTraces = null;
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ServicePeer getPeer()
    {
        return peer;
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Service:\n");
        str.append("Inf2IdService = ")
               .append(getInf2IdService())
             .append("\n");
        str.append("Inf2IdInitiator = ")
               .append(getInf2IdInitiator())
             .append("\n");
        str.append("Inf2IdResponder = ")
               .append(getInf2IdResponder())
             .append("\n");
        str.append("Inf2IdAgreement = ")
               .append(getInf2IdAgreement())
             .append("\n");
        str.append("Inf2IdState = ")
               .append(getInf2IdState())
             .append("\n");
        str.append("Inf2SlaObject = ")
               .append(getInf2SlaObject())
             .append("\n");
        str.append("Inf2CountPendingRequest = ")
               .append(getInf2CountPendingRequest())
             .append("\n");
        str.append("Inf2Active = ")
               .append(getInf2Active())
             .append("\n");
        return(str.toString());
    }
}
